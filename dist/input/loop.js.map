{"version":3,"file":"loop.js","sourceRoot":"","sources":["../../src/server/input/loop.ts"],"names":[],"mappings":";;AACA,qDAAkD;AAClD,mCAAsC;AACtC,iDAAsC;AAEtC,eAAuB,SAAQ,qBAAY;IACzC;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IAED,GAAG;QACD,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAIrC,MAAM,IAAI,GAAG,qBAAK,CAAC,UAAU,EAAE;YAC7B,2DAA2D;SAC5D,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI;YAEzB,IAAI,CAAC,IAAI,CAAC,mBAAQ,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YAC1C,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,oBAAoB,OAAO,EAAE,CAAC,CAAC;YACnD,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK;YAC3B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI;YACzB,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI;YACnB,OAAO,CAAC,GAAG,CAAC,kCAAkC,IAAI,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAlCD,8BAkCC","sourcesContent":["import { IInput } from \"../interfaces/IInput\";\nimport { Messages } from \"../interfaces/messages\";\nimport { EventEmitter } from \"events\";\nimport { spawn } from \"child_process\";\n\nexport class LoopInput extends EventEmitter implements IInput {\n  constructor() {\n    super();\n  }\n\n  run() {\n    let chunkId = 0;\n    let timeStart = new Date().getTime();\n\n    //./ffmpeg -re -stream_loop -1 -i loop.flv -f flv pipe:1 < /dev/null\n\n    const loop = spawn(\"./ffmpeg\", [\n      \"-re -stream_loop -1 -i loop.flv -f flv pipe:1 < /dev/null\"\n    ]);\n    loop.stdout.on(\"data\", data => {\n      // parseStream(data);\n      this.emit(Messages.FLV_INPUT_CHUNK, data);\n      const time = (new Date().getTime() - timeStart) / 1000;\n      console.log(`[${time}] LOOP got chunk ${chunkId}`);\n      chunkId++;\n    });\n\n    loop.stdout.on(\"error\", error => {\n      console.log(error);\n    });\n\n    loop.stderr.on(\"data\", data => {\n      console.log(`stderr: ${data}`);\n    });\n\n    loop.on(\"close\", code => {\n      console.log(`child process exited with code ${code}`);\n    });\n  }\n}\n"]}