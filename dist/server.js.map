{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server/server.ts"],"names":[],"mappings":"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","sourcesContent":["import * as WebSocket from 'uws';\nimport * as fs from 'fs';\nimport { spawn } from 'child_process';\nimport { FLV, FLVDecoder } from './transform/flvdecoder';\nimport { VideoTag } from './interfaces/videotag';\n\nexport class Server {\n  private streamUrl: string;\n  private lastdata = Buffer.alloc(0);\n  private decoder: FLVDecoder;\n\n  constructor() {\n    const configJson = fs.readFileSync(__dirname + '/../config.json');\n    const config = JSON.parse(configJson.toString());\n    this.streamUrl = config.source;\n    this.decoder = new FLVDecoder(() => {\n      this.startSocketServer();\n    });\n\n    this.startRTMP();\n  }\n\n  startRTMP() {\n    let chunkId = 0;\n    let timeStart = new Date().getTime();\n\n    const rtmpdump = spawn('rtmpdump', ['-vr', this.streamUrl, '-o', '-']);\n\n    rtmpdump.stdout.on('data', (data: Buffer) => {\n      this.parseStream(data);\n      const time = (new Date().getTime() - timeStart) / 1000;\n      console.log(`[${time}] RTMP got chunk ${chunkId}`);\n      chunkId++;\n    });\n\n    rtmpdump.stdout.on('error', error => {\n      console.log(error);\n    });\n\n    rtmpdump.stderr.on('data', data => {\n      console.log(`stderr: ${data}`);\n    });\n\n    rtmpdump.on('close', code => {\n      console.log(`child process exited with code ${code}`);\n    });\n  }\n\n  startSocketServer() {\n    // let clientId = 0;\n    const wss = new WebSocket.Server({ host: '0.0.0.0', port: 9090 });\n    wss.on('connection', function connection(ws) {\n      ws.on('message', function incoming(message) {\n        console.log('received: %s', message);\n      });\n\n      // send flv header and aac/avc tags\n      ws.send(this.decoder.firstPacket);\n      // wait for keyframe\n      let waitFirstKeyframe = true;\n      // let wsClientId = ++clientId;\n\n      // start sending data\n      let handler = (tag: VideoTag) => {\n        if (tag.avcFrameType == FLV.VIDEO_AVC_KEYFRAME) {\n          waitFirstKeyframe = false;\n        }\n\n        if (!waitFirstKeyframe) {\n          // console.log('ws send frame to c:' + wsClientId);\n          ws.send(tag.data, error => {\n            if (error) {\n              this.decoder.removeListener('frame', handler);\n            }\n          });\n        }\n      };\n\n      this.decoder.on('frame', handler);\n    });\n  }\n\n  parseStream(data: Buffer) {\n    // console.log('last:' + lastdata.length + ' new:' + data.length)\n\n    data = Buffer.concat([this.lastdata, data]);\n    let bytesLeft = this.decoder.parseChunks(data);\n    const unprocessedDataStart = data.length - bytesLeft;\n    data = data.slice(unprocessedDataStart);\n    this.lastdata = data;\n    // console.log('cut ' + bytesLeft);\n  }\n}\n\n// const chunk = fs.readFileSync('stream.flv');\n// decoder.parseChunks(chunk);\n// const stream = fs.createReadStream('stream.flv');\n// stream.on('data', parseStream);\n"]}